def evaluate(board):
    for row in board:
        if row.count(player) == 3:
            return 10
        if row.count(opponent) == 3:
            return -10

    for col in zip(*board):
        if col.count(player) == 3:
            return 10
        if col.count(opponent) == 3:
            return -10

    if board[0][0] == board[1][1] == board[2][2] == player:
        return 10
    if board[0][0] == board[1][1] == board[2][2] == opponent:
        return -10

    if board[0][2] == board[1][1] == board[2][0] == player:
        return 10
    if board[0][2] == board[1][1] == board[2][0] == opponent:
        return -10

    return 0

def minimax(board, depth, isMax):
    score = evaluate(board)
    if score == 10:
        return 10 - depth
    if score == -10:
        return depth - 10
    if not any('_' in row for row in board):
        return 0

    best_val = -100 if isMax else 100
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = player if isMax else opponent
                val = minimax(board, depth + 1, not isMax)
                best_val = max(best_val, val) if isMax else min(best_val, val)
                board[i][j] = '_'

    return best_val

def findBestMove(board):
    best_val, best_move = -100, (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                board[i][j] = player
                move_val = minimax(board, 0, False)
                board[i][j] = '_'
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

board = [
    ['x', 'o', 'x'],
    ['o', '_', 'x'],
    ['_', 'o', '_']
]

player, opponent = 'x', 'o'
bestMove = findBestMove(board)
print(f"The Optimal Move is: ROW: {bestMove[0]}, COL: {bestMove[1]}")
